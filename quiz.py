import streamlit as st
import random
from dataclasses import dataclass
from typing import List, Dict, Any

# Page configuration
st.set_page_config(
    page_title="Interactive Quiz App",
    page_icon="🧠",
    layout="wide",
    initial_sidebar_state="collapsed"
)

@dataclass
class Question:
    """Data class to represent a quiz question"""
    question_text: str
    question_type: str  # 'multiple_choice' or 'true_false'
    options: List[str]  # For multiple choice, ['True', 'False'] for true/false
    correct_answer: str
    explanation: str = ""

class QuizManager:
    """Manages quiz state and operations"""
    
    def __init__(self):
        self.initialize_session_state()
    
    def initialize_session_state(self):
        """Initialize all session state variables"""
        if 'quiz_started' not in st.session_state:
            st.session_state.quiz_started = False
        if 'current_question' not in st.session_state:
            st.session_state.current_question = 0
        if 'questions' not in st.session_state:
            st.session_state.questions = []
        if 'user_answers' not in st.session_state:
            st.session_state.user_answers = []
        if 'quiz_completed' not in st.session_state:
            st.session_state.quiz_completed = False
        if 'score' not in st.session_state:
            st.session_state.score = 0
        if 'show_feedback' not in st.session_state:
            st.session_state.show_feedback = False
        if 'selected_category' not in st.session_state:
            st.session_state.selected_category = None
        if 'selected_difficulty' not in st.session_state:
            st.session_state.selected_difficulty = None
    
    def get_question_bank(self) -> Dict[str, Dict[str, List[Question]]]:
        """
        Question bank organized by category and difficulty
        In a real app, this could be loaded from a database or generated by LLM
        """
        return {
            "Programming": {
                "Easy": [
                    Question("Python is a compiled language.", "true_false", ["True", "False"], "False", "Python is an interpreted language, not compiled."),
                    Question("Which symbol is used for comments in Python?", "multiple_choice", ["//", "#", "/*", "<!--"], "#", "# is used for single-line comments in Python."),
                    Question("HTML stands for HyperText Markup Language.", "true_false", ["True", "False"], "True", "HTML indeed stands for HyperText Markup Language."),
                    Question("Which of these is a Python web framework?", "multiple_choice", ["Django", "React", "Angular", "Vue"], "Django", "Django is a high-level Python web framework."),
                    Question("CSS is used for styling web pages.", "true_false", ["True", "False"], "True", "CSS (Cascading Style Sheets) is used to style HTML elements."),
                ],
                "Medium": [
                    Question("What does API stand for?", "multiple_choice", ["Application Programming Interface", "Advanced Programming Interface", "Automated Programming Interface", "Application Process Interface"], "Application Programming Interface", "API stands for Application Programming Interface."),
                    Question("JavaScript and Java are the same programming language.", "true_false", ["True", "False"], "False", "JavaScript and Java are completely different programming languages."),
                    Question("Which of these is NOT a programming language?", "multiple_choice", ["Python", "HTML", "Java", "C++"], "HTML", "HTML is a markup language, not a programming language."),
                    Question("Git is a version control system.", "true_false", ["True", "False"], "True", "Git is a distributed version control system for tracking changes in source code."),
                    Question("What is the time complexity of binary search?", "multiple_choice", ["O(n)", "O(log n)", "O(n²)", "O(1)"], "O(log n)", "Binary search has O(log n) time complexity as it halves the search space in each iteration."),
                ],
                "Hard": [
                    Question("What design pattern ensures a class has only one instance?", "multiple_choice", ["Factory", "Observer", "Singleton", "Strategy"], "Singleton", "The Singleton pattern ensures a class has only one instance and provides global access to it."),
                    Question("In Python, everything is an object.", "true_false", ["True", "False"], "True", "In Python, everything including numbers, strings, functions, and classes are objects."),
                    Question("Which sorting algorithm has the best average time complexity?", "multiple_choice", ["Bubble Sort", "Quick Sort", "Merge Sort", "Selection Sort"], "Merge Sort", "Merge Sort has consistent O(n log n) time complexity in all cases."),
                    Question("Functional programming languages are stateless.", "true_false", ["True", "False"], "True", "Pure functional programming languages avoid changing state and mutable data."),
                    Question("What does SOLID stand for in programming principles?", "multiple_choice", ["Simple Object Linear Design", "Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion", "Structured Object Logic Design", "System Object Layer Design"], "Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion", "SOLID is an acronym for five design principles intended to make software designs more understandable, flexible, and maintainable."),
                ]
            },
            "Web Development": {
                "Easy": [
                    Question("What does CSS stand for?", "multiple_choice", ["Computer Style Sheets", "Cascading Style Sheets", "Creative Style Sheets", "Colorful Style Sheets"], "Cascading Style Sheets", "CSS stands for Cascading Style Sheets."),
                    Question("HTML is a programming language.", "true_false", ["True", "False"], "False", "HTML is a markup language, not a programming language."),
                    Question("Which HTML tag is used for the largest heading?", "multiple_choice", ["<h6>", "<h1>", "<header>", "<title>"], "<h1>", "<h1> represents the largest/most important heading."),
                    Question("CSS can be written inline in HTML elements.", "true_false", ["True", "False"], "True", "CSS can be written inline using the style attribute."),
                    Question("Which protocol is used for web communication?", "multiple_choice", ["FTP", "HTTP", "SMTP", "SSH"], "HTTP", "HTTP (HyperText Transfer Protocol) is the foundation of web communication."),
                ],
                "Medium": [
                    Question("What is the box model in CSS?", "multiple_choice", ["Content, Padding, Border, Margin", "Header, Body, Footer", "HTML, CSS, JavaScript", "Width, Height, Color"], "Content, Padding, Border, Margin", "The CSS box model consists of content, padding, border, and margin."),
                    Question("JSON stands for JavaScript Object Notation.", "true_false", ["True", "False"], "True", "JSON indeed stands for JavaScript Object Notation."),
                    Question("Which HTTP method is used to update data?", "multiple_choice", ["GET", "POST", "PUT", "DELETE"], "PUT", "PUT is typically used for updating existing resources."),
                    Question("CSS Grid is newer than Flexbox.", "true_false", ["True", "False"], "True", "CSS Grid was introduced after Flexbox and provides more advanced layout capabilities."),
                    Question("What does DOM stand for?", "multiple_choice", ["Document Object Model", "Data Object Management", "Dynamic Object Method", "Document Oriented Markup"], "Document Object Model", "DOM stands for Document Object Model."),
                ],
                "Hard": [
                    Question("What is the difference between '==' and '===' in JavaScript?", "multiple_choice", ["No difference", "=== checks type and value, == only checks value", "== is faster than ===", "=== is deprecated"], "=== checks type and value, == only checks value", "=== performs strict equality checking both type and value, while == performs type coercion."),
                    Question("Service Workers can work offline.", "true_false", ["True", "False"], "True", "Service Workers enable offline functionality by intercepting network requests."),
                    Question("Which pattern is commonly used in React for state management?", "multiple_choice", ["MVC", "Observer", "Flux/Redux", "Singleton"], "Flux/Redux", "Flux architecture and Redux are popular state management patterns in React."),
                    Question("WebAssembly runs at near-native speed.", "true_false", ["True", "False"], "True", "WebAssembly is designed to run at near-native speed by taking advantage of common hardware capabilities."),
                    Question("What is the purpose of a CDN?", "multiple_choice", ["Content Delivery Network for faster content delivery", "Central Data Network for data storage", "Code Development Network for collaboration", "Client Download Network for software"], "Content Delivery Network for faster content delivery", "CDN distributes content across multiple servers globally to reduce latency."),
                ]
            },
            "Data Science": {
                "Easy": [
                    Question("What does SQL stand for?", "multiple_choice", ["Structured Query Language", "Simple Query Language", "Standard Query Language", "System Query Language"], "Structured Query Language", "SQL stands for Structured Query Language."),
                    Question("Python is commonly used in data science.", "true_false", ["True", "False"], "True", "Python is one of the most popular programming languages for data science."),
                    Question("Which of these is a data visualization library in Python?", "multiple_choice", ["NumPy", "Matplotlib", "Pandas", "Scikit-learn"], "Matplotlib", "Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations."),
                    Question("Big Data refers to datasets that are too large to process with traditional methods.", "true_false", ["True", "False"], "True", "Big Data is characterized by volume, velocity, and variety that exceed traditional processing capabilities."),
                    Question("What does CSV stand for?", "multiple_choice", ["Comma Separated Values", "Computer System Values", "Central System Variables", "Common Standard Values"], "Comma Separated Values", "CSV stands for Comma Separated Values."),
                ],
                "Medium": [
                    Question("What is the main purpose of NumPy?", "multiple_choice", ["Web development", "Numerical computing", "Database management", "Image processing"], "Numerical computing", "NumPy provides support for large, multi-dimensional arrays and matrices."),
                    Question("Machine learning is a subset of artificial intelligence.", "true_false", ["True", "False"], "True", "Machine learning is indeed a subset of AI focused on algorithms that learn from data."),
                    Question("Which algorithm is commonly used for classification?", "multiple_choice", ["Linear Regression", "Decision Tree", "K-means", "PCA"], "Decision Tree", "Decision Trees are commonly used for both classification and regression tasks."),
                    Question("Pandas is built on top of NumPy.", "true_false", ["True", "False"], "True", "Pandas is built on top of NumPy and provides data structures and operations for manipulating numerical tables."),
                    Question("What does ETL stand for in data processing?", "multiple_choice", ["Extract, Transform, Load", "Evaluate, Test, Launch", "Export, Transfer, Link", "Execute, Track, Log"], "Extract, Transform, Load", "ETL is a process that extracts data from sources, transforms it, and loads it into a destination."),
                ],
                "Hard": [
                    Question("What is the curse of dimensionality?", "multiple_choice", ["Too many features making algorithms inefficient", "Not enough data points", "Overfitting in models", "Memory limitations"], "Too many features making algorithms inefficient", "The curse of dimensionality refers to problems that arise when analyzing data in high-dimensional spaces."),
                    Question("Cross-validation helps prevent overfitting.", "true_false", ["True", "False"], "True", "Cross-validation is a technique used to assess how well a model will generalize to independent data."),
                    Question("Which technique is used for dimensionality reduction?", "multiple_choice", ["K-means", "PCA", "Random Forest", "SVM"], "PCA", "Principal Component Analysis (PCA) is a technique used to reduce the dimensionality of data."),
                    Question("Gradient descent always finds the global minimum.", "true_false", ["True", "False"], "False", "Gradient descent can get stuck in local minima and doesn't guarantee finding the global minimum."),
                    Question("What is the purpose of regularization in machine learning?", "multiple_choice", ["Increase model complexity", "Prevent overfitting", "Speed up training", "Improve accuracy"], "Prevent overfitting", "Regularization techniques add penalties to prevent the model from becoming too complex and overfitting."),
                ]
            },
            "General Knowledge": {
                "Easy": [
                    Question("What is the capital of France?", "multiple_choice", ["London", "Berlin", "Paris", "Madrid"], "Paris", "Paris is the capital and largest city of France."),
                    Question("The Earth revolves around the Sun.", "true_false", ["True", "False"], "True", "The Earth orbits around the Sun, completing one revolution in approximately 365.25 days."),
                    Question("How many continents are there?", "multiple_choice", ["5", "6", "7", "8"], "7", "There are seven continents: Asia, Africa, North America, South America, Antarctica, Europe, and Australia."),
                    Question("Water boils at 100°C at sea level.", "true_false", ["True", "False"], "True", "Water boils at 100°C (212°F) at standard atmospheric pressure."),
                    Question("Which planet is known as the Red Planet?", "multiple_choice", ["Venus", "Mars", "Jupiter", "Saturn"], "Mars", "Mars is called the Red Planet due to iron oxide (rust) on its surface."),
                ],
                "Medium": [
                    Question("What is the longest river in the world?", "multiple_choice", ["Amazon", "Nile", "Mississippi", "Yangtze"], "Nile", "The Nile River is generally considered the longest river in the world at about 6,650 km."),
                    Question("The Great Wall of China is visible from space.", "true_false", ["True", "False"], "False", "This is a common myth. The Great Wall is not visible from space with the naked eye."),
                    Question("Which element has the chemical symbol 'Au'?", "multiple_choice", ["Silver", "Gold", "Aluminum", "Argon"], "Gold", "Au comes from the Latin word 'aurum' meaning gold."),
                    Question("Lightning is hotter than the surface of the Sun.", "true_false", ["True", "False"], "True", "Lightning can reach temperatures of about 30,000 K, while the Sun's surface is about 5,800 K."),
                    Question("What is the smallest country in the world?", "multiple_choice", ["Monaco", "Vatican City", "San Marino", "Liechtenstein"], "Vatican City", "Vatican City is the smallest sovereign state in the world by both area and population."),
                ],
                "Hard": [
                    Question("What is the deepest point in Earth's oceans?", "multiple_choice", ["Mariana Trench", "Puerto Rico Trench", "Java Trench", "Philippine Trench"], "Mariana Trench", "The Challenger Deep in the Mariana Trench is the deepest known point in Earth's seabed."),
                    Question("Bananas are berries, but strawberries are not.", "true_false", ["True", "False"], "True", "Botanically, bananas are berries while strawberries are aggregate accessory fruits."),
                    Question("Which country has the most time zones?", "multiple_choice", ["Russia", "United States", "China", "France"], "France", "France has 12 time zones due to its overseas territories, more than any other country."),
                    Question("Octopuses have three hearts.", "true_false", ["True", "False"], "True", "Octopuses have three hearts: two pump blood to their gills, and one pumps blood to the rest of their body."),
                    Question("What is the hardest natural substance on Earth?", "multiple_choice", ["Quartz", "Diamond", "Titanium", "Graphite"], "Diamond", "Diamond is the hardest known natural material, rating 10 on the Mohs scale."),
                ]
            },
            "Technology": {
                "Easy": [
                    Question("What does WWW stand for?", "multiple_choice", ["World Wide Web", "World Wide Welcome", "Web Wide World", "Wide World Web"], "World Wide Web", "WWW stands for World Wide Web."),
                    Question("A smartphone is a type of computer.", "true_false", ["True", "False"], "True", "Smartphones are indeed computers with processors, memory, and operating systems."),
                    Question("Which company created the iPhone?", "multiple_choice", ["Google", "Apple", "Microsoft", "Samsung"], "Apple", "Apple Inc. created and manufactures the iPhone."),
                    Question("WiFi requires physical cables to connect to the internet.", "true_false", ["True", "False"], "False", "WiFi is a wireless networking technology that doesn't require physical cables for device connectivity."),
                    Question("What does USB stand for?", "multiple_choice", ["Universal Serial Bus", "United System Bus", "Universal System Bridge", "United Serial Bridge"], "Universal Serial Bus", "USB stands for Universal Serial Bus."),
                ],
                "Medium": [
                    Question("What is cloud computing?", "multiple_choice", ["Weather prediction", "Storing and accessing data over the internet", "A type of computer", "Wireless technology"], "Storing and accessing data over the internet", "Cloud computing involves delivering computing services over the internet."),
                    Question("Artificial Intelligence can learn without human intervention.", "true_false", ["True", "False"], "True", "Machine learning, a subset of AI, allows systems to automatically learn and improve from experience."),
                    Question("Which technology is used in contactless payments?", "multiple_choice", ["Bluetooth", "NFC", "WiFi", "GPS"], "NFC", "Near Field Communication (NFC) is used for contactless payments and data exchange."),
                    Question("5G is faster than 4G.", "true_false", ["True", "False"], "True", "5G technology offers significantly faster data speeds than 4G."),
                    Question("What does IoT stand for?", "multiple_choice", ["Internet of Things", "Internal Operating Technology", "Integrated Online Technology", "Internet Operating Tools"], "Internet of Things", "IoT stands for Internet of Things, referring to interconnected devices."),
                ],
                "Hard": [
                    Question("What is quantum computing based on?", "multiple_choice", ["Binary code", "Quantum mechanics", "Artificial intelligence", "Cloud storage"], "Quantum mechanics", "Quantum computing leverages quantum mechanical phenomena like superposition and entanglement."),
                    Question("Blockchain technology is only used for cryptocurrency.", "true_false", ["True", "False"], "False", "Blockchain has applications beyond cryptocurrency, including supply chain, healthcare, and voting systems."),
                    Question("Which technology enables virtual reality?", "multiple_choice", ["GPS tracking", "Motion sensors and displays", "Radio waves", "Magnetic fields"], "Motion sensors and displays", "VR uses motion sensors, displays, and processing power to create immersive experiences."),
                    Question("Edge computing processes data closer to where it's generated.", "true_false", ["True", "False"], "True", "Edge computing brings computation and data storage closer to data sources to reduce latency."),
                    Question("What is the main advantage of quantum cryptography?", "multiple_choice", ["Faster encryption", "Unbreakable security", "Lower cost", "Smaller file sizes"], "Unbreakable security", "Quantum cryptography offers theoretically unbreakable security based on quantum mechanics principles."),
                ]
            }
        }
    
    def generate_questions(self, category: str, difficulty: str) -> List[Question]:
        """Generate quiz questions based on category and difficulty"""
        question_bank = self.get_question_bank()
        
        if category in question_bank and difficulty in question_bank[category]:
            questions = question_bank[category][difficulty].copy()
            
            # If we have more than 10 questions, randomly select 10
            if len(questions) > 10:
                questions = random.sample(questions, 10)
            # If we have fewer than 10, add questions from other difficulties
            elif len(questions) < 10:
                all_questions = []
                for diff in question_bank[category]:
                    all_questions.extend(question_bank[category][diff])
                
                # Remove duplicates and shuffle
                seen = set()
                unique_questions = []
                for q in all_questions:
                    if q.question_text not in seen:
                        unique_questions.append(q)
                        seen.add(q.question_text)
                
                questions = random.sample(unique_questions, min(10, len(unique_questions)))
            
            random.shuffle(questions)
            return questions
        
        # Fallback to general questions if category not found
        return self.generate_questions("General Knowledge", "Easy")
    
    def reset_quiz(self):
        """Reset all quiz-related session state"""
        st.session_state.quiz_started = False
        st.session_state.current_question = 0
        st.session_state.questions = []
        st.session_state.user_answers = []
        st.session_state.quiz_completed = False
        st.session_state.score = 0
        st.session_state.show_feedback = False

def display_start_screen():
    """Display the quiz start screen with category and difficulty selection"""
    
    # Header
    st.markdown("""
    <div style='text-align: center; padding: 2rem 0;'>
        <h1 style='color: #1f77b4; font-size: 3rem; margin-bottom: 0;'>🧠 Interactive Quiz</h1>
        <p style='font-size: 1.2rem; color: #666; margin-top: 0;'>Test your knowledge across various topics!</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Instructions
    st.markdown("""
    ### 📋 How it works:
    - **10 questions** per quiz with mixed question types
    - **Immediate feedback** after each answer
    - **Progress tracking** throughout the quiz
    - **Detailed results** at the end with explanations
    """)
    
    st.markdown("---")
    
    # Selection columns
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### 📚 Select Category")
        category = st.selectbox(
            "Choose your topic:",
            ["Programming", "Web Development", "Data Science", "General Knowledge", "Technology"],
            key="category_select",
            help="Select the topic you want to be quizzed on"
        )
    
    with col2:
        st.markdown("#### ⚡ Select Difficulty")
        difficulty = st.selectbox(
            "Choose difficulty level:",
            ["Easy", "Medium", "Hard"],
            key="difficulty_select",
            help="Select the difficulty level that matches your expertise"
        )
    
    st.markdown("---")
    
    # Start button
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("🚀 Start Quiz", type="primary", use_container_width=True):
            st.session_state.selected_category = category
            st.session_state.selected_difficulty = difficulty
            st.session_state.quiz_started = True
            st.rerun()
    
    # Footer info
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #888; font-size: 0.9rem;'>
        💡 <b>Tip:</b> Take your time to read each question carefully. You'll get immediate feedback and explanations!
    </div>
    """, unsafe_allow_html=True)

def display_question(question: Question, question_num: int):
    """Display a single question with options"""
    
    # Progress bar
    progress = question_num / 10
    st.progress(progress, text=f"Question {question_num} of 10")
    
    st.markdown("---")
    
    # Question header
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown(f"### Question {question_num}")
    with col2:
        if question.question_type == "multiple_choice":
            st.markdown("**Type:** Multiple Choice")
        else:
            st.markdown("**Type:** True/False")
    
    # Question text
    st.markdown(f"""
    <div style='background-color: #f0f2f6; padding: 1.5rem; border-radius: 10px; margin: 1rem 0;'>
        <h4 style='margin: 0; color: #1f77b4;'>{question.question_text}</h4>
    </div>
    """, unsafe_allow_html=True)
    
    # Answer options
    if question.question_type == "multiple_choice":
        answer = st.radio(
            "**Select your answer:**",
            question.options,
            key=f"question_{question_num}",
            index=None
        )
    else:  # true_false
        answer = st.radio(
            "**Select your answer:**",
            question.options,
            key=f"question_{question_num}",
            index=None,
            horizontal=True
        )
    
    return answer

def display_feedback(question: Question, user_answer: str, is_correct: bool):
    """Display immediate feedback for the answered question"""
    
    st.markdown("---")
    
    # Feedback header
    if is_correct:
        st.markdown("""
        <div style='background-color: #d4edda; color: #155724; padding: 1rem; border-radius: 5px; text-align: center;'>
            <h3 style='margin: 0;'>✅ Correct! Well done!</h3>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div style='background-color: #f8d7da; color: #721c24; padding: 1rem; border-radius: 5px; text-align: center;'>
            <h3 style='margin: 0;'>❌ Incorrect</h3>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style='background-color: #cce5ff; color: #004085; padding: 1rem; border-radius: 5px; margin-top: 1rem;'>
            <strong>Correct answer:</strong> {question.correct_answer}
        </div>
        """, unsafe_allow_html=True)
    
    # Explanation
    if question.explanation:
        st.markdown(f"""
        <div style='background-color: #fff3cd; color: #856404; padding: 1rem; border-radius: 5px; margin-top: 1rem;'>
            <strong>💡 Explanation:</strong><br>{question.explanation}
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")

def display_results():
    """Display final quiz results"""
    score = st.session_state.score
    total_questions = len(st.session_state.questions)
    percentage = (score / total_questions) * 100
    
    # Results header
    st.markdown("""
    <div style='text-align: center; padding: 2rem 0;'>
        <h1 style='color: #1f77b4; font-size: 3rem;'>🎉 Quiz Complete!</h1>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Score display
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div style='text-align: center; background-color: #e8f4fd; padding: 2rem; border-radius: 10px;'>
            <h2 style='color: #1f77b4; margin: 0;'>{score}/{total_questions}</h2>
            <p style='margin: 0.5rem 0 0 0;'>Questions Correct</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style='text-align: center; background-color: #f0f9ff; padding: 2rem; border-radius: 10px;'>
            <h2 style='color: #0ea5e9; margin: 0;'>{percentage:.1f}%</h2>
            <p style='margin: 0.5rem 0 0 0;'>Score Percentage</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        if percentage >= 80:
            grade = "Excellent! 🌟"
            color = "#059669"
            bg_color = "#ecfdf5"
        elif percentage >= 60:
            grade = "Good! 👍"
            color = "#0891b2"
            bg_color = "#f0f9ff"
        elif percentage >= 40:
            grade = "Fair 📚"
            color = "#ea580c"
            bg_color = "#fff7ed"
        else:
            grade = "Keep Learning! 💪"
            color = "#dc2626"
            bg_color = "#fef2f2"
        
        st.markdown(f"""
        <div style='text-align: center; background-color: {bg_color}; padding: 2rem; border-radius: 10px;'>
            <h2 style='color: {color}; margin: 0;'>{grade}</h2>
            <p style='margin: 0.5rem 0 0 0;'>Performance</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Performance message
    if percentage >= 80:
        st.success("🌟 Outstanding performance! You've mastered this topic!")
    elif percentage >= 60:
        st.info("👍 Well done! You have a good understanding of the material.")
    elif percentage >= 40:
        st.warning("📚 Not bad! Consider reviewing the material to improve your understanding.")
    else:
        st.error("💪 Keep studying! Practice makes perfect.")
    
    st.markdown("---")
    
    # Review answers section
    with st.expander("📋 Review Your Answers", expanded=False):
        for i, (question, user_answer) in enumerate(zip(st.session_state.questions, st.session_state.user_answers)):
            is_correct = user_answer == question.correct_answer
            
            # Question review
            if is_correct:
                st.markdown(f"""
                <div style='background-color: #d4edda; padding: 1rem; border-radius: 5px; margin: 1rem 0;'>
                    <strong>Question {i+1}:</strong> {question.question_text}<br>
                    <span style='color: #155724;'>✅ Your answer: {user_answer}</span>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style='background-color: #f8d7da; padding: 1rem; border-radius: 5px; margin: 1rem 0;'>
                    <strong>Question {i+1}:</strong> {question.question_text}<br>
                    <span style='color: #721c24;'>❌ Your answer: {user_answer}</span><br>
                    <span style='color: #004085;'>✓ Correct answer: {question.correct_answer}</span>
                </div>
                """, unsafe_allow_html=True)
            
            if question.explanation:
                st.markdown(f"**💡 Explanation:** {question.explanation}")
            
            if i < len(st.session_state.questions) - 1:
                st.markdown("---")

def main():
    """Main application function"""
    
    # Initialize quiz manager
    quiz_manager = QuizManager()
    
    # Main quiz logic
    if not st.session_state.quiz_started:
        # Show start screen
        display_start_screen()
    
    elif st.session_state.quiz_completed:
        # Show results
        display_results()
        
        st.markdown("---")
        
        # Action buttons
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            if st.button("🔄 Take Another Quiz", use_container_width=True):
                quiz_manager.reset_quiz()
                st.rerun()
        
        with col2:
            if st.button("📊 View Statistics", use_container_width=True):
                st.info("Statistics feature coming soon!")
        
        with col3:
            if st.button("📤 Share Results", use_container_width=True):
                score = st.session_state.score
                total = len(st.session_state.questions)
                percentage = (score / total) * 100
                category = st.session_state.selected_category
                difficulty = st.session_state.selected_difficulty
                
                share_text = f"I just completed a {difficulty} {category} quiz and scored {score}/{total} ({percentage:.1f}%)! 🧠✨"
                st.success(f"Share this: {share_text}")
    
    else:
        # Quiz in session
        
        # Generate questions if not already done
        if not st.session_state.questions:
            with st.spinner("🎲 Generating your personalized quiz questions..."):
                st.session_state.questions = quiz_manager.generate_questions(
                    st.session_state.selected_category,
                    st.session_state.selected_difficulty
                )
        
        current_q_index = st.session_state.current_question
        current_question = st.session_state.questions[current_q_index]
        
        # Quiz header
        st.markdown(f"""
        <div style='text-align: center; background-color: #f8f9fa; padding: 1rem; border-radius: 10px; margin-bottom: 2rem;'>
            <h2 style='color: #1f77b4; margin: 0;'>{st.session_state.selected_category} Quiz</h2>
            <p style='margin: 0.5rem 0 0 0; color: #666;'>Difficulty: {st.session_state.selected_difficulty}</p>
        </div>
        """, unsafe_allow_html=True)
        
        if not st.session_state.show_feedback:
            # Display question
            user_answer = display_question(current_question, current_q_index + 1)
            
            if user_answer is not None:
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    if st.button("✅ Submit Answer", type="primary", use_container_width=True):
                        # Process answer
                        st.session_state.user_answers.append(user_answer)
                        
                        is_correct = user_answer == current_question.correct_answer
                        if is_correct:
                            st.session_state.score += 1
                        
                        st.session_state.show_feedback = True
                        st.rerun()
            else:
                st.info("👆 Please select an answer before submitting.")
        
        else:
            # Show feedback
            user_answer = st.session_state.user_answers[-1]
            is_correct = user_answer == current_question.correct_answer
            
            # Display question and user's answer
            st.markdown(f"### Question {current_q_index + 1}")
            st.markdown(f"""
            <div style='background-color: #f0f2f6; padding: 1.5rem; border-radius: 10px; margin: 1rem 0;'>
                <h4 style='margin: 0; color: #1f77b4;'>{current_question.question_text}</h4>
                <p style='margin: 1rem 0 0 0; color: #666;'><strong>Your answer:</strong> {user_answer}</p>
            </div>
            """, unsafe_allow_html=True)
            
            display_feedback(current_question, user_answer, is_correct)
            
            # Navigation
            if current_q_index < len(st.session_state.questions) - 1:
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    if st.button("➡️ Next Question", type="primary", use_container_width=True):
                        st.session_state.current_question += 1
                        st.session_state.show_feedback = False
                        st.rerun()
            else:
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    if st.button("🎯 View Final Results", type="primary", use_container_width=True):
                        st.session_state.quiz_completed = True
                        st.rerun()
    
    # Sidebar with quiz info
    with st.sidebar:
        st.markdown("### 📊 Quiz Progress")
        
        if st.session_state.quiz_started and not st.session_state.quiz_completed:
            # Current progress
            current_q = st.session_state.current_question + 1
            progress = current_q / 10
            st.progress(progress)
            st.write(f"Question {current_q} of 10")
            
            # Current score
            if st.session_state.user_answers:
                current_score = st.session_state.score
                questions_answered = len(st.session_state.user_answers)
                st.metric("Current Score", f"{current_score}/{questions_answered}")
            
            st.markdown("---")
            st.markdown(f"**Category:** {st.session_state.selected_category}")
            st.markdown(f"**Difficulty:** {st.session_state.selected_difficulty}")
        
        elif st.session_state.quiz_completed:
            # Final results summary
            score = st.session_state.score
            total = len(st.session_state.questions)
            percentage = (score / total) * 100
            
            st.metric("Final Score", f"{score}/{total}")
            st.metric("Percentage", f"{percentage:.1f}%")
            
            st.markdown("---")
            st.markdown(f"**Category:** {st.session_state.selected_category}")
            st.markdown(f"**Difficulty:** {st.session_state.selected_difficulty}")
        
        else:
            # Welcome message
            st.markdown("""
            ### Welcome! 👋
            
            Ready to test your knowledge? 
            
            **Features:**
            - 🎯 Multiple categories
            - ⚡ 3 difficulty levels
            - 💡 Instant feedback
            - 📊 Detailed results
            - 🔄 Unlimited attempts
            
            Choose your category and difficulty to get started!
            """)
        
        st.markdown("---")
        
        # Reset button (always available)
        if st.button("🔄 Reset Quiz", help="Start over with a new quiz"):
            quiz_manager.reset_quiz()
            st.rerun()

# Run the application
if __name__ == "__main__":
    main()